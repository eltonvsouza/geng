package br.com.model;

// Generated 26/10/2012 15:13:15 by Hibernate Tools 3.4.0.CR1

import java.util.Date;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Past;

import org.hibernate.validator.constraints.Length;
import org.hibernate.validator.constraints.NotEmpty;

/**
 * Filho generated by hbm2java
 */
@Entity
@Table(name = "filho", catalog = "geng")
public class Filho implements java.io.Serializable {

	private Integer codigo;
	private Trabalhador trabalhador;
	private int unidade;
	private String nome;
	private String mae;
	private Date nascimento;

	public Filho() {
	}

	public Filho(Trabalhador trabalhador, int unidade, String nome) {
		this.trabalhador = trabalhador;
		this.unidade = unidade;
		this.nome = nome;
	}

	public Filho(Trabalhador trabalhador, int unidade, String nome, String mae,
			Date nascimento) {
		this.trabalhador = trabalhador;
		this.unidade = unidade;
		this.nome = nome;
		this.mae = mae;
		this.nascimento = nascimento;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "codigo", unique = true, nullable = false)
	public Integer getCodigo() {
		return this.codigo;
	}

	public void setCodigo(Integer codigo) {
		this.codigo = codigo;
	}

	@NotNull(message="Campo Trabalhador: Obrigatório")
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "trabalhador", nullable = false)
	public Trabalhador getTrabalhador() {
		return this.trabalhador;
	}

	public void setTrabalhador(Trabalhador trabalhador) {
		this.trabalhador = trabalhador;
	}

	@NotNull(message="Campo Unidade: Obrigatório")
	@Column(name = "unidade", nullable = false)
	public int getUnidade() {
		return this.unidade;
	}

	public void setUnidade(int unidade) {
		this.unidade = unidade;
	}

	@NotEmpty(message="Campo Nome: Obrigatório")
	@Length(min=3, max=100, message="Campo Nome: Tamanho mínimo de 3 caracteres")
	@Column(name = "nome", nullable = false, length = 100)
	public String getNome() {
		return this.nome;
	}

	public void setNome(String nome) {
		this.nome = nome;
	}

	@NotEmpty(message="Campo Mãe: Obrigatório")
	@Length(min=3, max=100, message="Campo Mãe: Tamanho mínimo de 3 caracteres")
	@Column(name = "mae", length = 100)
	public String getMae() {
		return this.mae;
	}

	public void setMae(String mae) {
		this.mae = mae;
	}

	@NotNull(message="Campo Data de Nascimento: Obrigatório")
	@Past(message="Campo Data de Nascimento: Impossível cadastrar datas futuras")
	@Temporal(TemporalType.DATE)
	@Column(name = "nascimento", length = 10)
	public Date getNascimento() {
		return this.nascimento;
	}

	public void setNascimento(Date nascimento) {
		this.nascimento = nascimento;
	}

}
