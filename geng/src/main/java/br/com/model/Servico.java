package br.com.model;

// Generated 26/10/2012 15:13:15 by Hibernate Tools 3.4.0.CR1

import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.validation.constraints.NotNull;

import org.hibernate.validator.constraints.Length;
import org.hibernate.validator.constraints.NotEmpty;
import org.hibernate.validator.constraints.Range;

/**
 * Servico generated by hbm2java
 */
@Entity
@Table(name = "servico", catalog = "geng")
public class Servico implements java.io.Serializable {

	private Integer codigo;
	private Unidade unidade;
	private String descricao;
	private String unidadeMedida;
	private Set<Diario> diarios = new HashSet<Diario>(0);
	private Set<Insalubridade> insalubridades = new HashSet<Insalubridade>(0);

	public Servico() {
	}

	public Servico(Integer codigo, Unidade unidade, String descricao,
			String unidadeMedida) {
		this.codigo = codigo;
		this.unidade = unidade;
		this.descricao = descricao;
		this.unidadeMedida = unidadeMedida;
	}

	public Servico(Integer codigo, Unidade unidade, String descricao,
			String unidadeMedida, Set<Diario> diarios,
			Set<Insalubridade> insalubridades) {
		this.codigo = codigo;
		this.unidade = unidade;
		this.descricao = descricao;
		this.unidadeMedida = unidadeMedida;
		this.diarios = diarios;
		this.insalubridades = insalubridades;
	}

	@NotNull(message="Campo Código: Obrigatório")
	@Range(min=1, max=99999999, message="Campo Código: Obrigatório valores entre 1 e 99999999")
	@Id
	@Column(name = "codigo", unique = true, nullable = false)
	public Integer getCodigo() {
		return this.codigo;
	}

	public void setCodigo(Integer codigo) {
		this.codigo = codigo;
	}

	@NotNull(message="Campo Unidade: Obrigatório")
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "unidade", nullable = false)
	public Unidade getUnidade() {
		return this.unidade;
	}

	public void setUnidade(Unidade unidade) {
		this.unidade = unidade;
	}

	@NotEmpty(message="Campo Descrição: Obrigatório")
	@Length(min=5, max=100, message="Campo Descrição: Tamanho mínimo de 5 caracteres")
	@Column(name = "descricao", nullable = false, length = 100)
	public String getDescricao() {
		return this.descricao;
	}

	public void setDescricao(String descricao) {
		this.descricao = descricao;
	}

	@NotEmpty(message="Campo Unidade de Medida: Obrigatório")
	@Column(name = "unidadeMedida", nullable = false, length = 10)
	public String getUnidadeMedida() {
		return this.unidadeMedida;
	}

	public void setUnidadeMedida(String unidadeMedida) {
		this.unidadeMedida = unidadeMedida;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "servico")
	public Set<Diario> getDiarios() {
		return this.diarios;
	}

	public void setDiarios(Set<Diario> diarios) {
		this.diarios = diarios;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "servico")
	public Set<Insalubridade> getInsalubridades() {
		return this.insalubridades;
	}

	public void setInsalubridades(Set<Insalubridade> insalubridades) {
		this.insalubridades = insalubridades;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((codigo == null) ? 0 : codigo.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Servico other = (Servico) obj;
		if (codigo == null) {
			if (other.codigo != null)
				return false;
		} else if (!codigo.equals(other.codigo))
			return false;
		return true;
	}

}
