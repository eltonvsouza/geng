package br.com.model;

// Generated 26/10/2012 15:13:15 by Hibernate Tools 3.4.0.CR1

import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.validation.constraints.DecimalMax;
import javax.validation.constraints.DecimalMin;
import javax.validation.constraints.NotNull;

import org.hibernate.validator.constraints.Length;
import org.hibernate.validator.constraints.NotEmpty;

/**
 * Funcao generated by hbm2java
 */
@Entity
@Table(name = "funcao", catalog = "geng")
public class Funcao implements java.io.Serializable {

	private Integer codigo;
	private Unidade unidade;
	private String descricao;
	private Double salario;
	private Set<Trabalhador> trabalhadors = new HashSet<Trabalhador>(0);

	public Funcao() {
	}

	public Funcao(Unidade unidade, String descricao, Double salario) {
		this.unidade = unidade;
		this.descricao = descricao;
		this.salario = salario;
	}

	public Funcao(Unidade unidade, String descricao, Double salario,
			Set<Trabalhador> trabalhadors) {
		this.unidade = unidade;
		this.descricao = descricao;
		this.salario = salario;
		this.trabalhadors = trabalhadors;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "codigo", unique = true, nullable = false)
	public Integer getCodigo() {
		return this.codigo;
	}

	public void setCodigo(Integer codigo) {
		this.codigo = codigo;
	}

	@NotNull(message="Campo Unidade: Obrigatório")
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "unidade", nullable = false)
	public Unidade getUnidade() {
		return this.unidade;
	}

	public void setUnidade(Unidade unidade) {
		this.unidade = unidade;
	}

	@NotEmpty(message="Campo Descrição: Obrigatório")
	@Length(min=5, max=100, message="Campo Descrição: Tamanho mínimo de 5 caracteres")
	@Column(name = "descricao", nullable = false, length = 100)
	public String getDescricao() {
		return this.descricao;
	}

	public void setDescricao(String descricao) {
		this.descricao = descricao;
	}

	@NotNull(message="Campo Salário: Obrigatório")
	@DecimalMin(value="1.0000", message="Campo Salário: Valor mínimo permitido R$ 1,0000")
	@DecimalMax(value="99999.9999", message="Campo Salário: Valor máximo permitido R$ 99999,9999")
	@Column(name = "salario", nullable = false, precision = 9, scale = 4)
	public Double getSalario() {
		return this.salario;
	}

	public void setSalario(Double salario) {
		this.salario = salario;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "funcao")
	public Set<Trabalhador> getTrabalhadors() {
		return this.trabalhadors;
	}

	public void setTrabalhadors(Set<Trabalhador> trabalhadors) {
		this.trabalhadors = trabalhadors;
	}
	
//	@Override
//	public int hashCode() {
//		final int prime = 31;
//		int result = 1;
//		result = prime * result + ((codigo == null) ? 0 : codigo.hashCode());
//		return result;
//	}
//
//	@Override
//	public boolean equals(Object obj) {
//		if (this == obj)
//			return true;
//		if (obj == null)
//			return false;
//		if (getClass() != obj.getClass())
//			return false;
//		Funcao other = (Funcao) obj;
//		if (codigo == null) {
//			if (other.codigo != null)
//				return false;
//		} else if (!codigo.equals(other.codigo))
//			return false;
//		return true;
//	}

}
